The "tests" sub-directory contains tests that can be run after installing 
VB2000 as part of Gamess(US). 

In this "$GMSPATH/vb2000" directory, you will find:-

a) runallvb used for running the tests, 
b) checkvbtst used for checking the test runs. This uses a series of 
files, examvbXY (with XY = 01 --> 35), which are in the "./checktst" 
sub-directory.

In the DOC sub-directory you will find this README and gamess.README,

All output *.log files from 64 bit Linux runs with code compiled by
gfortran (gcc version 4.6.3) are in the "test_results" sub-directory.

The "runallvb" script assumes your working "rungms" script is in the
$GMSPATH directory, one up from where the "runallvb" script is. The
rungms script should define VB2000PATH (see gamess.README), overwriting
whatever might be defined in your .bashrc or .cshrc file. Note that
rungms ensures that some scratch files are in $SCR where the input file
is moved and the job run, and that some files are in $USERSCR.

Run the tests jobs with:-

./runallvb &

The results should be checked against the values in the input files,
which of course also appears near the top of the output. The *.dat files
and other files from an earlier run in $USERSCR are now deleted in
runallvb before rerunning the tests. Note that the scratch files used by
VB2000 in $SCR are either deleted in rungms or moved to $USERSCR. For
some tests they have to be moved back to $SCR for a restart in the
following test.

You can check the results with the "checkvbtst" script which works much
like $GMSPATH/tools/checktst/checktst for the regular tests. It uses
the files ./checktst/examvb??.

Type:-

./checkvbtst

at the shell prompt and indicate at the first prompt that the output
*.log files are in $GMSPATH/vb2000 (since you are probably already in
that directory, you can just select the default "."). You can also
compare your results directly with the output *.log files in
$GMSPATH/vb2000/test_results.

The tests are:-

1. A straight Gamess run to show that the VB2000 code is ignored if
there is no $VB2000 group and no VBTYP command in the $CONTRL group.

2. A run to show the VB2000 code aborting if the VBTYP=VB2000 is present
and the $VB2000 group is not present or it does not contain a #! command
line.

3. A standard VB2000 run for a closed shell case.

This also tests five of the visualisation possabilities, MOLPLT, PLTORB,
MOLDEN, CUBE and DENSCUBE. MOLPLT and PLTORB are present in Gamess but
behave differently in the VB2000 implementation as follows:-

a) MOLPLT 

If the $MOLPLT directive is present in the VB2000 data block, the MOLPLT 
data is created by the VB2000 routines as exam-vb03.mol and the call for 
MOLPLT in the Gamess $CONTRL group, if present as in this test, is ignored.

b) PLTORB

If the $PLTORB directive is present in the VB2000 data block, then the
the VB orbitals are put into a VEC file (exam-vb03.vec) and the PLTORB
input is output as an ORB file (exam-vb03.orb). If PLTORB is set true in
the GAMESS $CONTRL block, separate pltorb data is added to the PUNCH
file (exam0vb03.dat). The VB2000 $PLTORB directive reads more
information, leading to an ORB file which should work without change,
although it can be changed to modify the original setup. The data in
the PUNCH file always requires editing.

c) MOLDEN

This generates a general molden format file with *.molden extension. 

d) CUBE

If the $CUBE directive is present in the VB2000 data block, in this case
as:-

 $CUBE
 7
 1 2 3 4 5 6 7
 WATER STO-3G
 40

then 7 cube files are created as exam-vb03-001.cube, exam-vb03-002, etc.
Each of these contains the cube data for the appropriate MO or VB
orbital (1, 2, 3, 4, 5, 6  or 7) using 40 grid points on each axis. Note
that 40 is not optimum but adequate and gives a reasonable size cube
file for a test. In real runs this should be in the range 50 - 100. 100
is the maximum allowed and if 0 is given, it defaults to 80.

The files are initially created in the $SCR scratch directory, but are moved
in rungms to the $USERSCR directory in the users space.

e) DENSCUBE

This new directive, if present, in this case as:-

 $DENSCUBE
 DENS GRPS
 2
 1 2 
 WATER STO-3G
 40

creates CUBE files for the total density (the DENS keyword) and the 2
groups, 1 (the MO core group) and 2 (the VB group) (the GRPS keyword).
VBOS can be used as an alternative to GRPS. Again, it uses 40 grid
points on each axis and this can be raised to 80 or 100. 100 is the
maximum allowed and if 0 is given, it defaults to 80.

4. Similar to test 3, but illustrates how symmetry can be used to define
the data and then switched off.

This also tests another three of the visualisation possabilities,
MOLEKEL, GENGRID and XYZFILE as follows:-

It also tests the use of the GAMESS $CONTRL directive AIMPAC=.TRUE.,
which now outputs the VB2000 AIMPAC data to the PUNCH file. With the
$PRINTNOS, as here, it also outputs the VB natural orbitals at the end
of the output file.

a) MOLEKEL

If the $MOLEKEL directive is present in the VB2000 data block, optionally 
followed by root of a file name MKLNAME, a file in the Molekel native
mkl format is output. The file name is MKLNAME.mkl or if that line is
absent, JOB.mkl (exam-vb04.mkl).

b) GENGRID

The data is similar to the $CUBE date, with the same comments as above
about the core orbital and the number of grid points.

 $GENGRID
 7
 1 2 3 4 5 6 7
 WATER cc-pVDZ
 40

c) XYZFILE

If the $XYZFIKE directive is present in the VB2000 data block, a file
(exam-vb04.xyz) is created. This is the simplest format for the
molecular coordinates and can be read by a large number of visualisation
codes. The data is $XYZFILE folloed bu an optional, but recomended title
on the second line

 $XYZFILE
 Water

The files are initially created in the scratch directory, but are moved
in runallvb to the current working directory if you set $SCR correctly
in that script. 
 
5. A standard VB2000 run, but with inclusion of f orbitals in the basis
set. This is not possible with the stand-alone VB2000 code. It also uses
the non-documented $LSTVBOLIB directive that writes out the VBOLIB to
test the process that creates the VBOLIB for the 6-311G(3df,3p) basis
set on the fly from the VBOLIB for 6-311G.

6. A similar run but with an even larger basis set including a g
orbital. The basis set is defined here in the $DATA group so previously
a VBOLIB could not be used. However, it is now clear that the process used
in example 4 to pad out the VBOLIB for the parent basis set is not
actually needed. Work is progressing on adding the ability to select the
VBOLIB from a basis set name in the command line, even when that basis set
is not the one taken from the GAMESS data. In this case it is 6-311G and
slects that VBOLIB. The result is better convergence when the VBOLIB is
used.

7. Shows a TRUDGE run to optimize the geometry.

8. A similar run to test7, but illustrates a way in which the
coordinate variables can be constrained. In this case, only two
variables are used for water, with the second O-H length constrained to
be equal to the first. In test 7, three variables are optimized.

9. A simple test of the VB2000 part of Gamess with EXETYP=CHECK.

10. A very simple and quick reaction path run of H2O going from bent to 
linear.

This also tests one of the visualisation possabilities, XYZFILE, but unlike
test4, this gives a multi-step XYZ file with the coordinates for each
step of the reaction path. This file can be used for an animation of the
reaction path.

a) XYZFILE

If the $XYZFIKE directive is present in the VB2000 data block, a file
(exam-vb10.xyz) is created. 

11. A test of the "SPHER" keyword that forces the use of spherical
harmonic d, f and g functions for the VB calculation.  In this casse,
there are only d polarisation functions.

12. This uses RUNTYP=OPTIMIZE and NUMGRD=.TRUE. to optimize the VB
geometry using numerical gradients. 

13. This uses the geometry from test 18 to evaluate the VB frequencies,
using the $FORCE METHOD=FULLNUM $END group.

14. This tests how a wider range of properties other than the dipole
moment can be evaluated from the VB wavefunction.

15. A test of CH2S with the cc-VDZ basis that has a larger number of
primitive Gaussians per contracted function than previous studies.

16. This uses the $RESTARTFILE from test 3 to do just one macroiteration
at SCVB(4) level rather than VB(4).

17. This does a restart from test 16, and must therefore follow that
run. It does a full number of macroiterations.

18. This tests demonstrates that effective core potential calculations
can be run, in this case with the built-in SBKJC potential. It also
tests the creation of CUBE files for effective core potential
calculations.

19. This tests demonstrates that effective core potential calculations
can be run, in this case with the built-in Heys-Wadt potential.

20. A test of an open shell system with general basis (D95) entered in
$DATA group. This tests the spin density code and the creation of CUBE
files with the $DENSCUBE directive, with:-

 $DENSCUBE
 SPIN VBOS
 1
 2
 TMM TRIPLET
 40

that creates CUBE files for the spin density and the VB group (group 2).

21. An open shell CASVB calculation which illustrates the action taken
if the data tries to evaluate properties.

22. Another open shell CASVB test, using a basis set not built into
GAMESS.

23. A test of H2O with the D95 basis set using localization enhancement
control with $LENHANCE and DIIS plus damping for convergence.

24. A test of full localisation using $BRILLMASK for a minimum basis set
calculation on the pi system of benzene.  It also the $CENTROID option
to modify the default centroid output. 

25. A test that users the same system as exam-vb23 but uses BRILLMASK to
localise all the orbitals uncluding the core 1s orbital.

26. This run is exactly like exam-vb22, but uses UHF rather than ROHF.
You should note that the alpha orbitals are used in VB2000 to get the
LMOs and the initial guess. While simple, this is a good test as it is 
for a triplet state. It is the same as exam-vb22, but UHF not ROHR, and 
gives the same VB results in the same number of macroiterations.

27. This is standard 6-31G run on water, as in other tests, but this uses
DFT/B3LYP to get the initial VB guess. The DFT KS
orbitals are used as the intitial guess for the VB2000 HF group orbitals
and for the LMOs used for the initial guess of the VBOs. Both this run and 28 below give the
same energy, -76.05813919, after 13 macroiterations. The DFT guess
orbitals are sometimes a better starting guess, leading to less
macroiterations. Note that this has no similarity it the VBDFT method of
Wu et al.

28. This is as 27, but uses normal RHF to get the initial VB guess.

29. This tests the use of MCSCF starting orbitals from a a 6-31G* CASSCF(6,6)
calculation on benzene, followed by a SC(6) calculation which can 
be directly compared with the CASSCF. It also allows you to make a minor 
change from SC(6) to VB(6) giving the 5 SC strcutures explicitly to
avoid crossing Rumer structures. Clearly other groups such as
$MCSCF, $DET or $DRT may be needed. The MCCSCF orbitals are used for the
initial guess. It is common to
compare SC results with the comparable CASSCF.

30. This is a test of using the GVB non-orthogonal orbitals as ! the
initial guess. It is the simplest possible calculation for H2, where the
GVB is actually identical to the VB calculation. The guess is actually
the final result so it converges after only one macroiteration. Note,
that perhaps surprisingly, for larger cases getting the same result as 
the GAMESS GVB takes more than one macroiteration. The initial guess in VB2000 is taken from the real GVB orbitals, not the GVB CI orbitals, so the guess is
actually the final result so it converges after one macroiteration.
However this is not the case for larger molecules. For reasons that are
not fully understood, a GVB guess still requires several macroiterations
in VB2000 to get the identical GVB energy and wavefunction. It is
therefore possible to compare GVB results from GAMESS with GVB results
from VB2000 in the same run and use the GAMESS GVB orbitals as an
initial guess for the VB orbitals with a more complex VB function.  This
might be a very good guess for advanced VB methods such as CASVB and SC. 

31. This is similar to exam-vb26 and exam-vb27 as a calculation on water
with the 6-31G basis set. This one calculates the MP2 energy, but the
RHF energy is used by VB2000 to form the initial orbitals.

32. This is similar to exam-vb31 but this calculates the CCSD(T) energy,
with the RHF energy used by VB2000 to form the initial orbitals.

33. This is similar to exam-vb29, but the SC calculation on benzene 
follows a GUGA based CISD calculation. As with exam-vb29, the SC(6) can
be replaced by VB(6) and activating the $VB2STR line to get correct
coefficients for the Rumer structures.

34. This tests the use of $NOVBPROP to optimise the geometry at the RHF
level, followed by a VB calculation at the final geometry. This is
constrast to test 12 which optimises the structure using a VB function,
although it can only use numerical gradients. The new one-line option:-

 $NOVBPROP

has several functions. First, in this context, it leads to the
entry to the VB2000 routines returning without doing anything. Second,
it stops returning energies, orbitals , densities, etc from the VB2000
code to the GAMESS code. In this case the final properties are not for
the VB function but the GAMESS method. 

35. This illustrates the use of $NOVBPROP by a RHF Hessian calculation
followed by a VB calculation. RUNTYP=HESSIAN was allowed previously, as 
in exam-vb13, for a full numerical evaluation of the Hessian and vibrational 
frequences. The $FORCE group containing METHOD=FULLNUM has to be present. 
This gives the vibration analysis for the VB function. Again this can be 
shifted to the GAMESS method followed by a single VB calculation using 
$NOVBPROP.

36. This is a more standard (compared with the simple run on H2 in
exam-vb30) test of using GVB for the initial guess. It involves a
preliminary run to get a $VEC block for GUESS=MOREAD in GUESS.
In general, GVB runs are not simple. First, do a RHF run with
LOCAL=BOYS in the $CONTRL group (LOCAL=RUEDNBRG or LOCAL=POP can also be
used), and VVOS=.TRUE. in the $SCF group. Then add the localisation $VEC
group to the data for a GVB + VB2000 run.  This group will include the
VVOS which are also localised so pair with the occupied LMOs. For some
hypervalent molecules, the number of VVOS is not equal to the number of
pairs required, but it is usually easy to find a virtual orbital that
will do and add it from the main $VEC group to the localisation $VEC
group by hand. The virtual orbital of a pair is less important than the
occupied orbital as the latter has a larger weight in the final GVB
function and dominates the calculation. However, it is always better to
use VVOS if possible. The $SCF group has to have NCO and NPAIR set.
NSETO has to be zero (the default), so no open shell systems can
currently be run.  Then use GUESS=MOREAD with NORB set to the number of
core orbitals plus twice the number of GVB pairs (i.e. NCO + 2 * NPAIR
from the $SCF group). Then reorder them so you have l1, v1, l2, v2 ...
for NPAIR pairs, where the li are the occupied LMOs and the vi are the
virtual LMOs.  These are used in the VB2000 code to get an initial
guess. You must set $GRPDIM for this type of run. If you request
VB(2).VB(2)...  for NPAIR pairs, you get the same result as the GAMESS
GVB code - the perfect pairing GVB result. exam-vb36 illustrates a
single structure VB(8) calculation on methane where the orthoganality
restrcition between the GVB pairs is removed, with much detail in
comments in the data file.

37. This test builds on exam11.inp to demonstrate that VB2000 in GAMESS
can calculate a VB saddle point starting from the HF saddle point. Only
the first point of the Intrinsic Reaction Coordinate (IRC) path in the
standard GAMESS test EXAM 11 is used as the starting geometry.

38. This tests the ability to calculate a VB function and energy at each
point of the Intrinsic Reaction Coordinate (IRC) using the standard GAMESS
test exam 11 as a start.

39. This tests the ability to calculate a VB function and energy at each
point of a surface scan using the standard GAMESS test exam 29 as a start.
The different RUNTYP options here and in 38 require the $NOVBPROP option in 
the $VB2000 group. RUNTYP=IRC and RUNTYP=SURFACE can not be run without it,
so only fixed point VB energies and functions are obtained at the points
determined by the IRC or SURFACE scans. The $NOVBPROP option is actually
set automatically for these cases.

40. This tests the use of molden file, through a script or program that 
creates a GAMESS input file for a VB2000 run.

41. This tests the ION(m,n) or SEN(m,n) for m electrons in n orbitals
using the new ionicity/seniority number code. It allows a selection of
structures based on their ionicity/seniority number. This is test is,
like example 24 for STO-6G benzene and selects ionicity = 0 (same as SC)
plus ionicity = 2. This is entirely equivalent to using seniority number =
6 plus seniority number = 2.

Note that "grep TERMINATED e*.log" should show all tests to have
terminated normally.

Relatively recent changes to the test set
-----------------------------------------

Changes in the GAMESS/VB2000 test set for version 2.5
-----------------------------------------------------

1. exam-vb09 now reflects the increased functionality of EXETYP=CHECK,
both in the comments and in the extra commands that are there to be
picked up.

2. exam-vb11 now tests the new "SPHER" keyword for spherical harmonics.
The old exam-vb11, is now exam-vb20, with 20, 21 and 22 renamed to 21,
22 and 23. checkvbtst and all the examvb?? have been updated.

3. exam-vb07, exam-vb08 and exam-vb15 now use the built-in cc-pVDZ basis
set. For the last case this is different from the earlier basis set
which only had one d function on S, not 2.

4. All examples that use the cc-pVDZ basis set now have ISPHER=1 in the
$CONTRL block, as since the 2010 version, GAMESS fails if spherical
harmonics are not specified.

Changes in the GAMESS/VB2000 test set for version 2.6
-----------------------------------------------------

1. exam-vb03 now tests the new $MOLDEN directive and exam-vb04 tests the
$GENGRID directive.

Changes in the GAMESS/VB2000 test set for version 2.7
-----------------------------------------------------

1. exam-vb03 now uses a rather verbose way to utilise the VBOLIB for
STO-nG and exam-vb04 uses a more compact way to utilise the same VBOLIB.

2. exam-vb03 now tests the new $DENSCUBE directive to create CUBE files
for the total density and the density of individual groups.

3. exam-vb05 now uses the new VBOLIB for 6-311G which is modified on the
fly to create a VBOLIB for 6-311G(3df,3p). This basis set is slightly
larger than previously. It also uses the non-documented $LSTVBOLIB
directive that writes out the VBOLIB to test that process.  exam-vb06
adds a g basis function to the basis set in exam-vb05, but to the $DATA
group so a VBOLIB can not be used here.

4. exam-vb20 now tests the $DENSCUBE directive for CUBE files of the
spin density.

5. exam-vb21 use a VBOLIB for the D95 basis set, the only one that can
be triggered from the VB2000 command line if the basis is defined in the
$DATA group.

6. exam-vb24 and exam-vb25 have been added. exam-vb24 is a minimum basis 
set calculation on the pi system of benzene which uses orbitals
localised by $BRILLMASK. It also the $CENTROID option to modify the
default centroid output. exam-vb25 is the same system as exam-vb23 but
uses BRILLMASK to localise all the orbitals uncluding the core 1s
orbital.

Changes in the GAMESS/VB2000 test set for version 2.8
-----------------------------------------------------

1. exam-vb26 to exam-vb40 have been added as detailed above. Users who
are intending to do IRC or surface scans. as illustrated in tests
exam-vb38 and exam-vb39, are advised to collaborate with Brian Duke in
developing these methods further. Both are just in-principle tests that
might need  more work for real studies.

2. exam-vb03 now also tests AIMPAC=.TRUE. in $CONTRL, which now for VB2000
runs gives AIMPAC data for the VB function not the GAMESS HF function. It
also tests $VECMOS, $VECLMOS, $VECINIT and $VECONLY.

3. exam-vb03 also tests AIMPAC=.TRUE. in $CONTRL, but to illustrate that
with the VB2000 directive $PRINTNOS it also prints the natural orbitals 
of the VB function and punches then to the *.dat PUNCH file. 

4. exam-vb09, which is the EXETYP=CHECK run, now demonstrates that all VB
directives are tested against a list. This runs find $NOPROP and reports 
that it may be wrong. It is indeed as the closest directive is $NOVBPROP.

5. exam-vb10 now uses $XYZREACTION rather than $XYZFILE to give a file of
all XYZ coordinates in a single file.

6. Very minor changes have been made in a few tests to directives and
explanatory text.



